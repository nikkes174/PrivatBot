import hashlib
import logging
import os
import urllib.parse
from typing import Dict

from aiogram import types
from dotenv import load_dotenv

load_dotenv()

MERCHANT_LOGIN = os.getenv("ROBO_LOGIN")

PASSWORD1 = os.getenv("ROBO_PASS1")


IS_TEST = "0"

ROBO_URL = "https://auth.robokassa.ru/Merchant/Index.aspx"

logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s ‚Äî %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)


class PaymentService:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Robokassa."""

    def __init__(
        self, merchant_login: str = MERCHANT_LOGIN, password1: str = PASSWORD1
    ):
        self.merchant_login = merchant_login
        self.password1 = password1
        self.pending_payments: Dict[str, int] = {}

    def _generate_signature(
        self, out_sum: str, inv_id: str, shp_params: Dict[str, str]
    ) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å MD5 –¥–ª—è Robokassa."""
        shp_str = ":".join(f"{k}={v}" for k, v in sorted(shp_params.items()))
        string_for_sign = (
            f"{self.merchant_login}:{out_sum}:{inv_id}:"
            f"{self.password1}:{shp_str}"
        )
        return hashlib.md5(string_for_sign.encode("utf-8")).hexdigest().upper()

    def generate_payment_url(
        self, user_id: int, months: int, price: int
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É Robokassa."""
        out_sum = f"{price}.00"
        inv_id = str(user_id * 10 + months)
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å."
        shp_params = {"Shp_months": str(months), "Shp_user": str(user_id)}
        signature_value = self._generate_signature(out_sum, inv_id, shp_params)
        params = {
            "MerchantLogin": self.merchant_login,
            "OutSum": out_sum,
            "InvId": inv_id,
            "Description": description,
            "SignatureValue": signature_value,
            "IsTest": IS_TEST,
            **shp_params,
        }
        return f"{ROBO_URL}?{urllib.parse.urlencode(params)}"

    async def start_payment(
        self, callback_query: types.CallbackQuery, months: int, price: int
    ) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã:
        - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É
        - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ pending_payments
        - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        user_id = callback_query.from_user.id
        payment_url = self.generate_payment_url(user_id, months, price)
        inv_id = str(user_id * 10 + months)
        self.pending_payments[inv_id] = user_id
        logging.info(
            "üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂: user_id=%s, months=%s, amount=%s",
            user_id,
            months,
            price,
        )

        await callback_query.message.answer(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å. –Ω–∞–∂–º–∏—Ç–µ üëâ "
            f'<a href="{payment_url}">–û–ø–ª–∞—Ç–∏—Ç—å</a>',
            parse_mode="HTML",
        )
        await callback_query.answer()
