import hashlib
import logging
import os
import time

import aiohttp
import asyncpg
from aiogram import F, Router, types
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, FSInputFile
from dotenv import load_dotenv

from tgbot.keyboards.inline import first_start_keyboard, tariffs_keyboard

load_dotenv()

user_router = Router()

MERCHANT_LOGIN = os.getenv("ROBO_LOGIN")

PASSWORD1 = os.getenv("ROBO_PASS1")

DB = os.getenv("DATABASE_URL")

logging.basicConfig(level=logging.INFO)


@user_router.message(CommandStart())
async def user_start(message: types.Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    try:
        photo = FSInputFile("–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    except Exception:
        photo = None

    caption_text = (
        "–°–º–µ—à–Ω–∞—è —Å—É–º–º–∞ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"
        " 43‚ÇΩ –≤ –¥–µ–Ω—å ‚Äî –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–æ–µ–∑–¥ –≤ –º–µ—Ç—Ä–æ!\n"
        "1 290‚ÇΩ/–º–µ—Å ‚Äî –≤–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–∫—É–ø–∏—Ç—Å—è —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!\n\n"
        "üìå –†–ï–ê–õ–¨–ù–û–°–¢–¨:\n"
        "‚úîÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏\n"
        "‚úîÔ∏è –£—Å–ø–µ—Ö —Å—Ä–µ–¥–∏ –∂–µ–Ω—â–∏–Ω –∏ —É–≤–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –º—É–∂—á–∏–Ω\n"
        "‚úîÔ∏è –°–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚Äî —Ç–≤–æ–π –Ω–∞–¥—ë–∂–Ω—ã–π —Ç—ã–ª\n\n"
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ‚Äî —ç—Ç–æ —Ç—Ä–∞–º–ø–ª–∏–Ω –≤ –Ω–æ–≤—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å üòé"
    )

    if photo:
        await message.answer_photo(photo=photo, caption=caption_text)
    else:
        await message.answer(caption_text)

    await message.answer(
        "–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –Ω–µ –∑–∞–±—É–¥—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π üëáüèª",
        reply_markup=first_start_keyboard(),
    )


@user_router.callback_query(F.data == "to_rate")
async def show_tariffs(call: CallbackQuery) -> None:
    """–ú–µ–Ω—é —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ (–∫–Ω–æ–ø–∫–∏ ‚Üí Robokassa)."""
    kb = tariffs_keyboard(call.from_user.id)

    await call.message.edit_text(
        text=(
            "üëáüèª –í–´–ë–ò–†–ê–ô –¢–ê–†–ò–§ –ò –ú–ï–ù–Ø–ô –°–í–û–Æ –ñ–ò–ó–ù–¨:\n\n"
            "‚û°Ô∏è 1 –º–µ—Å—è—Ü ‚Äî 1 290 ‚ÇΩ\n"
            "‚û°Ô∏è 3 –º–µ—Å—è—Ü–∞ ‚Äî 3 490 ‚ÇΩ (—Å–∫–∏–¥–∫–∞ 10%)\n"
            "‚û°Ô∏è 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 6 490 ‚ÇΩ (—Å–∫–∏–¥–∫–∞ 15%)\n"
            "‚û°Ô∏è 9 –º–µ—Å—è—Ü–µ–≤ ‚Äî 8 990 ‚ÇΩ (—Å–∫–∏–¥–∫–∞ 20%)"
        ),
        reply_markup=kb,
    )


async def charge_recurring_payment(recurring_id: str, amount: int) -> str:
    """–í—ã–∑—ã–≤–∞–µ—Ç Robokassa API –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."""
    invoice_id = int(time.time())
    out_sum = f"{amount:.2f}"

    signature_str = (
        f"{MERCHANT_LOGIN}:{out_sum}:{invoice_id}:{recurring_id}:{PASSWORD1}"
    )
    signature = hashlib.md5(signature_str.encode()).hexdigest()

    payload = {
        "MerchantLogin": MERCHANT_LOGIN,
        "OutSum": out_sum,
        "InvoiceID": invoice_id,
        "RecurringId": recurring_id,
        "Description": "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        "SignatureValue": signature,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://auth.robokassa.ru/Merchant/Recurring", data=payload
        ) as resp:
            text = await resp.text()
            logging.info("‚ö° Recurring payment: %s", text)
            return text


@user_router.callback_query(F.data == "to_change")
async def cancel_subscription(call: CallbackQuery) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ—á–∏—Å—Ç–∫–∞ recurring_id –≤ –ë–î)."""
    user_id = call.from_user.id

    try:
        conn = await asyncpg.connect(DB)
        await conn.execute(
            "UPDATE public.privat_user "
            "SET recurring_id = NULL WHERE user_id = $1",
            user_id,
        )
        await conn.close()
        logging.info("üî¥ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è user_id=%s", user_id)
        await call.message.edit_text("üî¥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
        await call.message.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    await call.answer()
