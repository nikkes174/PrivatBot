import asyncio
import logging
import pytz
import asyncpg
from datetime import date, datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot
import os
from typing import Optional


load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

CHANNEL_ID = os.getenv("CHANNEL_ID")

DB_DSN = os.getenv("DB_DSN")

bot = Bot(BOT_TOKEN)

MoscowTimeZone = pytz.timezone("Europe/Moscow")

TARIFF_PRICES = {
    1: 1290,
    3: 3490,
    6: 6490,
    9: 8990,
}


async def add_subscription(
    user_id: int,
    user_name: str,
    months: int,
    recurring_id: Optional[str] = None,
) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î.
    """
    conn = await asyncpg.connect(DB_DSN)
    try:
        start_date = date.today()
        end_date = start_date + timedelta(days=30 * months)

        await conn.execute(
            """
            INSERT INTO public.privat_user 
            (user_id, user_name, start_subscription, end_subscription, duration_months, recurring_id)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (user_id) DO UPDATE
            SET start_subscription = EXCLUDED.start_subscription,
                end_subscription = EXCLUDED.end_subscription,
                duration_months = EXCLUDED.duration_months,
                recurring_id = EXCLUDED.recurring_id,
                user_name = EXCLUDED.user_name
            """,
            user_id,
            user_name,
            start_date,
            end_date,
            months,
            recurring_id,
        )
        logging.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id=%s –æ–±–Ω–æ–≤–ª–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞", user_id)
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %s", e)
    finally:
        await conn.close()


async def charge_recurring_payment(recurring_id: str, amount: int) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
    –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –†–æ–±–æ–∫–∞—Å—Å—ã.
    """
    logging.info("‚ö° –ü–ª–∞—Ç—ë–∂ –ø–æ recurring_id=%s –Ω–∞ —Å—É–º–º—É %s", recurring_id, amount)
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –†–æ–±–æ–∫–∞—Å—Å—ã
    return "OK"


async def check_subscriptions() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∏—Ö,
    –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø–ª–∞—Ç—ã.
    """
    conn = await asyncpg.connect(DB_DSN)
    try:
        today = date.today()

        rows = await conn.fetch(
            """
            SELECT user_id, duration_months, recurring_id 
            FROM public.privat_user 
            WHERE end_subscription < $1
            """,
            today,
        )

        for row in rows:
            user_id = row["user_id"]
            months = row["duration_months"]
            recurring_id = row["recurring_id"]

            if recurring_id:
                amount = TARIFF_PRICES.get(months, 1290)
                result = await charge_recurring_payment(recurring_id, amount)

                if "OK" in result:
                    new_end = today + timedelta(days=30 * months)
                    await conn.execute(
                        """
                        UPDATE public.privat_user 
                        SET start_subscription=$1, end_subscription=$2 
                        WHERE user_id=$3
                        """,
                        today,
                        new_end,
                        user_id,
                    )
                    await bot.send_message(
                        user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!"
                    )
                    logging.info("üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id=%s", user_id)
                else:
                    await _remove_user(conn, user_id, "‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª, –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            else:
                await _remove_user(conn, user_id, "‚ùå –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫, –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: %s", e)
    finally:
        await conn.close()


async def _remove_user(conn, user_id: int, message: str) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª."""
    try:
        await bot.ban_chat_member(CHANNEL_ID, user_id)
        await bot.unban_chat_member(CHANNEL_ID, user_id)  # ¬´–∫–∏–∫¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("DELETE FROM public.privat_user WHERE user_id=$1", user_id)
        await bot.send_message(user_id, message)
        logging.info("‚ùå –£–¥–∞–ª—ë–Ω user_id=%s (–ø—Ä–∏—á–∏–Ω–∞: %s)", user_id, message)
    except Exception as e:
        logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, e)


async def scheduler() -> None:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ø–æ –ú–°–ö.
    """
    logging.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–æ–∂–∏–¥–∞–Ω–∏–µ 08:00 –ø–æ –ú–°–ö)")

    while True:
        now = datetime.now(MoscowTimeZone)

        if now.hour == 8 and now.minute == 0:
            logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")
            try:
                await check_subscriptions()
                logging.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –≤ check_subscriptions: %s", e)
            await asyncio.sleep(60)  # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è

        await asyncio.sleep(30)
